fun comp test() {
  
  a <- take
  emit a;

  
  -- Simply tests for the interpreter. Each of these let bindings should be
  -- simplified to a constant value.

  let eval_1  = 1
  let eval_2  = { 2, 3 }
  let eval_3  = 2 + 2 
  let eval_4  = 1 + 2 * - (3 - 5)
  let eval_5  = length( {11,12,13,14,15,16} )
  let eval_6  = (let x = 7 in x) 
  let eval_7  = (var x : int := 0 in x)
  let eval_8  = var x : int := 0 in { return x }
  let eval_9  = var x : int := 0 in { 
                    x := 8;
                    return x
                  } 
  let eval_10 = var x : arr[3] int := {0,0,0} in { 
                    x[0] := 9;
                    x[1] := 10;
                    x[2] := 11;
                    return x
                  }
  let eval_11 = complex { re = 12; im = 13 }                  
  let eval_12 = var x : complex := complex { re = 0; im = 0 } in {
                    return x
                  }
  let eval_13 = var x : complex := complex { re = 0; im = 0 } in {
                    x.re := 14;
                    x.im := 15;
                    return x
                  }
  let eval_14 = let x = { 16,17 } in x[0]                  
  let eval_15 = let x = { 16,17 } in x[1]                  
  let eval_16 = let x = complex { re = 18; im = 19 } in x.re;
  let eval_17 = let x = complex { re = 18; im = 19 } in x.im;
  let eval_18 = var x : arr[3] int := {0,0,0} in {
                    -- TODO: Surface syntax does not support multiple indices
                    -- for arrays, but the AST does, and moreover some other
                    -- passes may create them (such as asgn-letref). We can't
                    -- test very easily for that here though. 
                    x[0,2] := { 20, 999 };
                    x[1,2] := { 21, 22 };
                    return x;
                  }
  let eval_19 = var x : int := 0 in {
                    for i in [1,10] {
                      x := x + i;
                    }
                    return x;
                  }
  let eval_20 = var x : int := 0 in {
                    x := 1;
                    while (x < 100) {
                      println x;
                      x := x * 2; 
                    }
                    return x;
                  }
  let eval_21 = var x : int := 0 in {
                    for i in [1,10] {
                      if (i & 1 != 0) then {
                        x := x - i;
                      } else {
                        x := x + i;
                      }
                    }
                    return x;
                  }
  let eval_22 = let x = { 99, 23, 24, 25, 100 } in x[1,3];                  

  -- Some tests that cannot be fully evaluated because of free variables
  
  let eval_23 = let x = 1 in {
                    var y : int := 0;
                    if (a > 0) then {
                      y := x + 10;
                    } else {
                      y := x + 20;
                    }
                    return y;
                  }
  let eval_24 = let x = 1 in {
                    var y : int := 0;
                    for i in [0, a] {
                      y := y + x;
                    }
                    return y;
                  }
  let eval_25 = let x = 2 in {
                    var y : int := 1;
                    while (y < a) {
                      y := y * x;
                    }
                    return y;
                  }

  -- Previously done with subarr-inline-step

  let eval_26 = var x : arr[3] int := {0,0,0} in {
                    var y : arr[3] int;
                    y[0] := a;
                    y[1] := a;
                    y[2] := a;

                    x[0,3] := y; -- Simplify LHS

                    x[0] := x[0] + 26;
                    x[1] := x[1] + 27;
                    x[2] := x[2] + 28;

                    return x[0,3]; -- Simplify RHS
                  }

  -- Test assigning an array without default values to an array with defaults
  
  let eval_27 = var x : arr[5] int := { 29, 30, 31, 32, 33 } in {
                    var y : arr[3] int := {0,0,0} ;
                    x[1, 3] := y;
                    return x;
                  }

  emit  eval_1;
  emits eval_2;
  emit  eval_3;
  emit  eval_4;
  emit  eval_5;
  emit  eval_6;
  emit  eval_7;
  emit  eval_8;
  emit  eval_9;
  emits eval_10;
  emit  eval_11.re;
  emit  eval_11.im;
  emit  eval_12.re;
  emit  eval_12.im;
  emit  eval_13.re;
  emit  eval_13.im;
  emit  eval_14;
  emit  eval_15;
  emit  eval_16;
  emit  eval_17;
  emits eval_18;
  emit  eval_19;
  emit  eval_20;
  emit  eval_21;
  emits eval_22;
  emit  eval_23;
  emit  eval_24;
  emit  eval_25;
  emits eval_26;
  emits eval_27;

  emit a;
}

let comp main = read[int] >>> test() >>> write[int]
