TOP=.

.PHONY : all
all : kzc $(BLINKDIFF)

include mk/common.mk

#
# GHC flags
#
GHCFLAGS += \
	-hide-all-packages \
	-package array \
	-package base \
	-package binary \
        -package data-binary-ieee754 \
	-package bytestring \
	-package containers \
	-package directory \
	-package exception-mtl \
	-package exception-transformers \
	-package filepath \
	-package language-c-quote \
	-package logict \
	-package mainland-pretty \
	-package mtl \
	-package primitive \
	-package process \
	-package ref-fd \
	-package srcloc \
	-package syb \
	-package symbol \
	-package text \
	-package template-haskell \
	-package transformers \
	-package vector

GHCFLAGS_OPT = -O2 -funbox-strict-fields

ifeq ($(OPT), 1)
GHCFLAGS += $(GHCFLAGS_OPT)
endif

#
# Source locations
#
SRCDIR = src/

GHCFLAGS+=-i$(SRCDIR) -I$(SRCDIR)
RUNGHCFLAGS+=-i$(SRCDIR) -I$(SRCDIR)

GHCFLAGS+=-Iinclude

SOURCE = \
	KZC/Analysis/Lut.hs \
	KZC/Analysis/NeedDefault.hs \
	KZC/Analysis/Occ.hs \
	KZC/Analysis/Rate.hs \
	KZC/Analysis/ReadWriteSet.hs \
	KZC/Analysis/RefFlow.hs \
	KZC/Analysis/StaticRef.hs \
	KZC/Cg.hs \
	KZC/Cg/CExp.hs \
	KZC/Cg/Code.hs \
	KZC/Cg/Monad.hs \
	KZC/Cg/Util.hs \
	KZC/Check.hs \
	KZC/Check/Monad.hs \
	KZC/Check/Path.hs \
	KZC/Check/Smart.hs \
	KZC/Check/State.hs \
	KZC/Check/Types.hs \
	KZC/Core/Comp.hs \
	KZC/Core/Embed.hs \
	KZC/Core/Label.hs \
	KZC/Core/Lint.hs \
	KZC/Core/Smart.hs \
	KZC/Core/Syntax.hs \
	KZC/Core/Transform.hs \
	KZC/Derive.hs \
	KZC/Error.hs \
	KZC/Expr/Lint.hs \
	KZC/Expr/Lint/Monad.hs \
	KZC/Expr/Smart.hs \
	KZC/Expr/Syntax.hs \
	KZC/Expr/ToCore.hs \
	KZC/Flags.hs \
	KZC/Globals.hs \
	KZC/Interp.hs \
	KZC/Monad.hs \
	KZC/Monad/KT.hs \
	KZC/Monad/SEFKT.hs \
	KZC/Label.hs \
	KZC/LambdaLift.hs \
	KZC/Name.hs \
	KZC/Optimize/Autolut.hs \
	KZC/Optimize/Eval.hs \
	KZC/Optimize/Eval/Monad.hs \
	KZC/Optimize/Eval/Monad.hs-boot \
	KZC/Optimize/Eval/PArray.hs \
	KZC/Optimize/Eval/Val.hs \
	KZC/Optimize/Fuse.hs \
	KZC/Optimize/HashConsConsts.hs \
	KZC/Optimize/Simplify.hs \
	KZC/Platform.hs \
	KZC/Pretty.hs \
	KZC/Quote/C.hs \
	KZC/Rename.hs \
	KZC/Rename/Monad.hs \
	KZC/Summary.hs \
	KZC/Staged.hs \
	KZC/SysTools.hs \
	KZC/Trace.hs \
	KZC/Uniq.hs \
	KZC/Util/Lattice.hs \
	KZC/Util/SetLike.hs \
	KZC/Vars.hs \
	Language/Ziria/Parser/Alex.hs \
	Language/Ziria/Parser/Exceptions.hs \
	Language/Ziria/Parser/Lexer.hs \
	Language/Ziria/Parser/Monad.hs \
	Language/Ziria/Parser/Tokens.hs \
	Language/Ziria/Parser.hs \
	Language/Ziria/Smart.hs \
	Language/Ziria/Syntax.hs \
	Main.hs \
	Opts.hs

GENERATED = \
	KZC/Core/Syntax-instances.hs \
	KZC/Check/Types-instances.hs \
	KZC/Expr/Syntax-instances.hs \
	Language/Ziria/Parser/Lexer.hs \
	Language/Ziria/Parser/Parser.hs \
	Language/Ziria/Syntax-instances.hs

SRC = $(patsubst %,$(SRCDIR)%,$(SOURCE)) $(patsubst %,$(SRCDIR)%,$(GENERATED))

#
# all, clean, and distclean targets
#
.PHONY : clean
clean : clean-tests clean-runtime
	$(_QUIET)cabal clean
	$(_QUIET)rm -rf kzc obj $(patsubst %,$(SRCDIR)%,$(GENERATED)) libkz/src/*.o
	$(_QUIET)rm -f TAGS

.PHONY : clean-runtime
clean-runtime :
	$(_QUIET)rm -rf $(RUNTIME_OBJ)

.PHONY : clean-tests
clean-tests :
	$(_QUIET)rm -f \
	      $(patsubst %.blk,%.dump*,$(patsubst %.wpl,%.dump*,$(TESTS)))
	$(_QUIET)rm -f \
	      $(patsubst %.outfile.ground,%.c,$(GROUNDFILES)) \
	      $(patsubst %.outfile.ground,%.exe,$(GROUNDFILES)) \
	      $(patsubst %.outfile.ground,%.outfile,$(GROUNDFILES)) \
	      $(patsubst %.outfile.ground,%.dump*,$(GROUNDFILES))
	$(_QUIET)rm -f \
	      $(patsubst %.blk,%.c,$(PERFTESTS)) \
	      $(patsubst %.blk,%.exe,$(PERFTESTS)) \
	      $(patsubst %.blk,%.dump*,$(PERFTESTS))

.PHONY : distclean
distclean : clean
	$(_QUIET)rm -rf \
	    dist \
	    autom4te.cache configure config.log config.status \
	    include/KzcConfig.h include/KzcSysTools.h Makefile kzc.buildinfo

.PHONY : tags
tags : TAGS

TAGS : $(SRC)
	$(_QUIET)hasktags -cx $(SRC) -o $@

#
# kzc compiler
#
kzc : $(SRC) dist/build/autogen/cabal_macros.h
	@mkdir -p obj
	$(_QUIET)$(GHC) $(GHCFLAGS) --make $(SRCDIR)Main.hs -odir obj -hidir obj \
		-o $@

kzc.prof : kzc
	@mkdir -p obj
	$(_QUIET)$(GHC) $(GHCFLAGS) --make $(SRCDIR)Main.hs -odir obj -hidir obj \
		-prof -auto-all -caf-all -osuf p_o -hisuf p_hi -hcsuf p_hc -o $@

#
# Generated instances
#
$(SRCDIR)KZC/Check/Types-instances.hs : bin/gen-tc-instances.hs dist/build/autogen/cabal_macros.h $(SRCDIR)KZC/Derive.hs $(SRCDIR)KZC/Check/Types.hs
	$(_QUIET)runhaskell $(RUNGHCFLAGS) -DONLY_TYPEDEFS $< > $@ || rm -f $@

$(SRCDIR)KZC/Core/Syntax-instances.hs : bin/gen-core-instances.hs dist/build/autogen/cabal_macros.h $(SRCDIR)KZC/Derive.hs $(SRCDIR)KZC/Core/Syntax.hs
	$(_QUIET)runhaskell $(RUNGHCFLAGS) -DONLY_TYPEDEFS $< > $@ || rm -f $@

$(SRCDIR)KZC/Expr/Syntax-instances.hs : bin/gen-expr-instances.hs dist/build/autogen/cabal_macros.h $(SRCDIR)KZC/Derive.hs $(SRCDIR)KZC/Expr/Syntax.hs
	$(_QUIET)runhaskell $(RUNGHCFLAGS) -DONLY_TYPEDEFS $< > $@ || rm -f $@

$(SRCDIR)Language/Ziria/Syntax-instances.hs : bin/gen-ziria-instances.hs dist/build/autogen/cabal_macros.h $(SRCDIR)KZC/Derive.hs $(SRCDIR)Language/Ziria/Syntax.hs
	$(_QUIET)runhaskell $(RUNGHCFLAGS) -DONLY_TYPEDEFS $< > $@ || rm -f $@

#
# Lexer and parser generation
#
$(SRCDIR)Language/Ziria/Parser/Parser.hs : $(SRCDIR)Language/Ziria/Parser/Parser.y
	$(_QUIET)$(HAPPY) $(HAPPYFLAGS) -o $@ $<

$(SRCDIR)Language/Ziria/Parser/Lexer.hs : $(SRCDIR)Language/Ziria/Parser/Lexer.x
	$(_QUIET)$(ALEX) $(ALEXFLAGS) -o $@ $<

#
# Tests
#
TESTDIR = testsuite

TESTS = \
	$(shell ls $(TESTDIR)/tests/parser/*.wpl | sort) \
	$(shell ls $(TESTDIR)/tests/backend/*.wpl | sort) \
	$(shell ls $(TESTDIR)/tests/libs/*.wpl | sort) \
	$(shell ls $(TESTDIR)/tests/kzc-issues/*.wpl | sort) \
	$(shell ls $(TESTDIR)/tests/threads/*.wpl | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/sniffer/sniffer_example.blk) \
	$(shell ls $(TESTDIR)/code/WiFi/tests/*.blk | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/transmitter/tests/*.blk | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/receiver/tests/*.blk | sort)

PERFTESTS = \
	$(shell ls $(TESTDIR)/code/WiFi/perf/*.blk | sort)

.PHONY : test-parser
test-parser : kzc
	set -e; \
	for TEST in $(TESTS); do \
		echo $$TEST; \
		./kzc $(KZCFLAGS) -P $$TEST; \
	done

.PHONY : test-tc
test-tc : kzc
	set -e; \
	for TEST in $(TESTS); do \
		echo $$TEST; \
		./kzc $(KZCFLAGS) -C $$TEST; \
	done

.PHONY : test-compiler
test-compiler : kzc
	set -e; \
	for TEST in $(TESTS); do \
		echo $$TEST; \
		./kzc $(KZCFLAGS) $$TEST -o test.c; \
		$(MAKE) test.exe; \
	done

GROUNDFILES= \
	$(shell ls $(TESTDIR)/tests/backend/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/tests/libs/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/tests/lut/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/tests/kzc-issues/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/tests/threads/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/sniffer/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/tests/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/transmitter/tests/*.outfile.ground | sort) \
	$(shell ls $(TESTDIR)/code/WiFi/receiver/tests/*.outfile.ground | sort)

.PHONY : test-ground
test-ground : $(patsubst %.outfile.ground,%.test,$(GROUNDFILES))

.PHONY : test-all
test-all :
	set -e; \
	for DIR in \
	  tests/backend \
	  tests/lut \
	  tests/libs \
	  tests/kzc-issues \
	  tests/threads \
	  code/WiFi/transmitter/tests \
	  code/WiFi/receiver/tests \
	  code/WiFi/tests \
	  code/WiFi/sniffer; do \
		(cd $(TESTDIR)/$$DIR && $(MAKE) $(VIRTUAL_GOALS)); \
	done

#
# autotools stuff
#
include/KzcConfig.h.in : configure.ac aclocal.m4
	autoheader

Makefile : Makefile.in
	./config.status

%.h : %.h.in
	./config.status

%.buildinfo : %.buildinfo.in
	./config.status

dist/build/autogen/cabal_macros.h :
	cabal build BlinkDiff
